/*
 *  GML - Go QML
 *  Copyright (c) 2019 Roland Singer [roland.singer@deserbit.com]
 *  Copyright (c) 2019 Sebastian Borchers [sebastian@deserbit.com]
 */

package build

import "text/template"

var goTmpl = template.Must(template.New("t").Funcs(tmplFuncMap).Parse(goTmplText))

// TODO:
// - constructor add error (try catch)?
// - signals catch error & add params
// - move the gml pointer import path into a template variable.
const goTmplText = `// This file is auto-generated by gml.
package {{.PackageName}}

// #cgo pkg-config: Qt5Core Qt5Qml Qt5Quick
// #cgo LDFLAGS: -lstdc++
// #include <stdlib.h>
// #include <stdint.h>
// #include <gml_gen.h>

{{- /* Register with go slots */ -}}
{{range $struct := .Structs}}
// 
{{- range $slot := $struct.Slots }}
// extern void {{$struct.CBaseName}}_{{$slot.Name}}_go_slot(void* goPtr);
{{end -}}
// static void {{$struct.CBaseName}}_register_slots() {
{{- range $slot := $struct.Slots }}
//      {{$struct.CBaseName}}_{{$slot.Name}}_cb_register({{$struct.CBaseName}}_{{$slot.Name}}_go_slot);
{{end -}}
// }
{{end -}}

import "C"
import (
    "unsafe"
    "runtime"

	"github.com/desertbit/gml"
	"github.com/desertbit/gml/pointer"
)

{{/* Struct loop */ -}}
{{range $struct := .Structs -}}
//###
//### {{$struct.Name}}
//###

{{/* Init */ -}}
func init() {
    C.{{$struct.CBaseName}}_register_slots()
}

func (_v *{{$struct.Name}}) GMLInit() {
    goPtr := pointer.Save(_v)
    _v.GMLObject_SetPointer(unsafe.Pointer(C.{{$struct.CBaseName}}_new(goPtr)))
    runtime.SetFinalizer(_v, func(_v *{{$struct.Name}}) {
        C.{{$struct.CBaseName}}_free((C.{{$struct.CBaseName}})(_v.GMLObject_Pointer()))
        pointer.Unref(goPtr)
    })
}

{{- /* Signals */}}
{{range $signal := $struct.Signals }}
func (_v *{{$struct.Name}}) {{$signal.EmitName}}({{goParams $signal.Params true true}}) {
    _ptr := (C.{{$struct.CBaseName}})(_v.GMLObject_Pointer())
    {{- goToCParams $signal.Params "_c_" 4}}
    C.{{$struct.CBaseName}}_{{$signal.Name}}(_ptr{{goParams $signal.Params false false "_c_"}})
}
{{end}}

{{- /* Slots */ -}}
{{range $slot := $struct.Slots }}
//export {{$struct.CBaseName}}_{{$slot.Name}}_go_slot
func {{$struct.CBaseName}}_{{$slot.Name}}_go_slot(goPtr unsafe.Pointer) {
	_v := (pointer.Restore(goPtr)).(*{{$struct.Name}})
    _v.{{$slot.Name}}()
}
{{end}}

{{- /* End of struct loop */ -}}
{{- end}}
`

/*
 *  GML - Go QML
 *  Copyright (c) 2019 Roland Singer [roland.singer@deserbit.com]
 *  Copyright (c) 2019 Sebastian Borchers [sebastian@deserbit.com]
 */

package build

import "text/template"

var goTmpl = template.Must(template.New("t").Funcs(tmplFuncMap).Parse(goTmplText))

// TODO:
// - constructor add error (try catch)?
// - signals catch error & add params
const goTmplText = `// This file is auto-generated by gml.
package {{.PackageName}}

// #cgo pkg-config: Qt5Core Qt5Qml Qt5Quick
// #cgo LDFLAGS: -lstdc++
// #include <gml_gen.h>
import "C"
import (
    "unsafe"
    "runtime"
)

{{/* Struct loop */ -}}
{{range $struct := .Structs -}}
//###
//### {{$struct.Name}}
//###

{{/* Init */ -}}
func (_v *{{$struct.Name}}) GMLInit() {
    _v.GMLObject_SetPointer(unsafe.Pointer(C.{{$struct.CBaseName}}_new()))
    runtime.SetFinalizer(_v, func(_v *{{$struct.Name}}) {
        C.{{$struct.CBaseName}}_free((C.{{$struct.CBaseName}})(_v.GMLObject_Pointer()))
    })
}

{{/* Signals */ -}}
{{- range $signal := $struct.Signals }}
func (_v *{{$struct.Name}}) {{$signal.Name}}({{goParams $signal.Params true}}) {
    _ptr := (C.{{$struct.CBaseName}})(_v.GMLObject_Pointer())
    C.{{$struct.CBaseName}}_{{$signal.Name}}(_ptr)
}
{{end}}

{{- /* End of struct loop */ -}}
{{- end}}
`

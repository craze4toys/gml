/*
 *  GML - Go QML
 *  Copyright (c) 2019 Roland Singer [roland.singer@deserbit.com]
 *  Copyright (c) 2019 Sebastian Borchers [sebastian@deserbit.com]
 */

package build

import "text/template"

var cMainHeaderTmpl = template.Must(template.New("t").Funcs(tmplFuncMap).Parse(cMainHeaderTmplText))

const cMainHeaderTmplText = `// This file is auto-generated by gml.
#ifndef GML_GEN_C_INCLUDE_H
#define GML_GEN_C_INCLUDE_H

{{ range .Packages -}}
#include "../{{.PackageName}}.h"
{{- end}}

#endif
`

var cHeaderTmpl = template.Must(template.New("t").Funcs(tmplFuncMap).Parse(cHeaderTmplText))

const cHeaderTmplText = `// This file is auto-generated by gml.
#ifndef GML_GEN_C_{{.PackageName}}_H
#define GML_GEN_C_{{.PackageName}}_H

#ifdef __cplusplus
extern "C" {
#endif

{{/* Struct loop */ -}}
{{range $struct := .Structs -}}
//###
//### {{$struct.Name}}
//###

typedef void* {{$struct.CBaseName}};

{{$struct.CBaseName}} {{$struct.CBaseName}}_new();
void {{$struct.CBaseName}}_free({{$struct.CBaseName}});

{{/* Signals */ -}}
{{- range $signal := $struct.Signals }}
void {{$struct.CBaseName}}_{{$signal.Name}}({{$struct.CBaseName}} _v{{cParams $signal.Params false}});
{{end}}

{{- /* End of struct loop */ -}}
{{- end}}

#ifdef __cplusplus
}
#endif

#endif
`
